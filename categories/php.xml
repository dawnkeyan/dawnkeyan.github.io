<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>晚起的虫子 (关于文章 php)</title><link>https://dawnkeyan.github.io</link><description></description><atom:link href="https://dawnkeyan.github.io/categories/php.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2018 &lt;a href="mailto:dawnkeyan@126.com"&gt;dawnkeyan&lt;/a&gt; </copyright><lastBuildDate>Tue, 30 Oct 2018 14:43:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>设计模式</title><link>https://dawnkeyan.github.io/posts/she-ji-mo-shi/</link><dc:creator>dawnkeyan</dc:creator><description>&lt;div&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;创建型&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;简单工厂模式&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;优点：&lt;/dt&gt;
&lt;dd&gt;操作者不用管具体实例化哪个对象，工厂类通过参数去决定实例化对象；降低耦合&lt;/dd&gt;
&lt;dt&gt;缺点：&lt;/dt&gt;
&lt;dd&gt;编译期间就定好了有哪些类，如果有新需求，需要修改工厂类&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="figure"&gt;
&lt;img alt="https://img3.doubanio.com/view/note/l/public/p55239996.jpg" src="https://img3.doubanio.com/view/note/l/public/p55239996.jpg"&gt;
&lt;/div&gt;
&lt;p&gt;ArchitectureFactory&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?php
/**
* Created by PhpStorm.
* User: wky
* Date: 2018/10/30
* Time: 10:16
*/
namespace Simple\Factory;

/**
* Class ArchitectureFactory 工厂类
* @package Simple\Factory
*/
class ArchitectureFactory{

   protected $typeList;

   public function __construct()
   {
       //需要实例化的对象的数组
       $this-&amp;gt;typeList = [
           'officeBuilding'=&amp;gt;__NAMESPACE__.'\OfficeBuilding',//造写字楼
           'school'=&amp;gt;__NAMESPACE__.'\School',//造学校
       ];
   }

   public function getExample($type){
       if(!isset($this-&amp;gt;typeList[$type])){
           //todo 提示类不存在
       }
       return new $this-&amp;gt;typeList[$type]();
   }
}
&lt;/pre&gt;
&lt;p&gt;ArchitectureInterFace&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?php
/**
* Created by PhpStorm.
* User: wky
* Date: 2018/10/30
* Time: 10:16
*/
namespace Simple\Factory;

/**
* Interface ArchitectureInterFace 造写字楼和学校需要的设计图
* @package Simple\Factory
*/
interface ArchitectureInterFace{

   public function designChart();
}
&lt;/pre&gt;
&lt;p&gt;OfficeBuilding&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?php
/**
* Created by PhpStorm.
* User: wky
* Date: 2018/10/30
* Time: 10:16
*/
namespace Simple\Factory;

/**
* Class OfficeBuilding 造写字楼
* @package Simple\Factory
*/
class OfficeBuilding implements ArchitectureInterFace{

   public function designChart(){
       return '造写字楼的图纸';
   }
}
&lt;/pre&gt;
&lt;p&gt;School&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?php
/**
* Created by PhpStorm.
* User: wky
* Date: 2018/10/30
* Time: 10:22
*/
namespace Simple\Factory;

/**
* Class School 造学校
* @package Simple\Factory
*/
class School implements ArchitectureInterFace{

   public function designChart(){
       return '造学校的图纸';
   }
}
&lt;/pre&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?php
/**
* Created by PhpStorm.
* User: wky
* Date: 2018/10/30
* Time: 10:24
*/
namespace Simple\Factory;

/**
* Class Test
* @package Simple\Factory
*/
class Test{

   public function test(){
       $architecture = ['officeBuilding', 'school'];
       $factory = new ArchitectureFactory();
       foreach ($architecture as $type){
           $factory-&amp;gt;getExample($type);
       }
   }
}
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;工厂方法模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和简单工厂方法模式的区别是工厂方法实例化在子类&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;抽象工厂模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和工厂方法模式的区别是抽象工厂一个产品一个实现类，有新需求不用改原来的代码&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;静态工厂模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和简单工厂的区别是静态工厂是在工厂类中的静态方法实例化对象&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;多例模式&lt;/li&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;对象池模式&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;结构型&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;适配器模式&lt;/li&gt;
&lt;li&gt;桥梁模式&lt;/li&gt;
&lt;li&gt;组合模式&lt;/li&gt;
&lt;li&gt;数据映射模式&lt;/li&gt;
&lt;li&gt;装饰模式&lt;/li&gt;
&lt;li&gt;依赖注入模式&lt;/li&gt;
&lt;li&gt;门面模式&lt;/li&gt;
&lt;li&gt;流接口模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;li&gt;注册模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;行为型&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;责任链模式&lt;/li&gt;
&lt;li&gt;命令行模式&lt;/li&gt;
&lt;li&gt;迭代器模式&lt;/li&gt;
&lt;li&gt;中介者模式&lt;/li&gt;
&lt;li&gt;备忘录模式&lt;/li&gt;
&lt;li&gt;空对象模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;规格模式&lt;/li&gt;
&lt;li&gt;状态模式&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;模板方法模式&lt;/li&gt;
&lt;li&gt;访问者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;委托模式&lt;/li&gt;
&lt;li&gt;服务定位模式&lt;/li&gt;
&lt;li&gt;资源模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考地址：&lt;a class="reference external" href="https://laravelacademy.org/post/2465.html"&gt;https://laravelacademy.org/post/2465.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>php</category><category>设计模式</category><guid>https://dawnkeyan.github.io/posts/she-ji-mo-shi/</guid><pubDate>Tue, 30 Oct 2018 01:13:45 GMT</pubDate></item><item><title>php实现经典算法</title><link>https://dawnkeyan.github.io/posts/phpshi-xian-jing-dian-suan-fa/</link><dc:creator>dawnkeyan</dc:creator><description>&lt;div&gt;&lt;p&gt;冒泡:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function bub_sort($array){
      $n = count($array);
            for($i=0; $i&amp;lt;$n; $i++){
                    for($j=$i+1; $j&amp;lt;$n; $j++){
                            if($array[$i]&amp;gt;$array[$j]){
                                    $temp = $array[$i];
                                    $array[$i] = $array[$j];
                                    $array[$j] = $temp;
                            }
                    }
            }
            var_dump($array);
    }
    bub_sort([3,2,1,5,7,3]);
&lt;/pre&gt;
&lt;p&gt;直接插入排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function ins_sort($array){
             $len = count($array);
             for($i=1;$i&amp;lt;$len;$i++){
                     $temp = $array[$i];
                     for($j=$i-1;$j&amp;gt;=0;$j--){
                             if($temp&amp;lt;$array[$j]){
                                     $array[$j+1] = $array[$j];
                                     $array[$j] = $temp;
                             }
                             else{
                                     break;
                             }
                     }
             }
             var_dump($array);
     }

     ins_sort([3,1,2,5,7,10,9,8]);
&lt;/pre&gt;
&lt;p&gt;直接选择排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function sel_sort($array){
             $len = count($array);
             for($i=0;$i&amp;lt;$len-1;$i++){
                     $p = $i;
                     for($j=$i+1;$j&amp;lt;$len;$j++){
                             if($array[$j]&amp;gt;$array[$p]){
                                     $p = $j;
                             }
                     }
                     $temp = $array[$p];
                     $array[$p] = $array[$i];
                     $array[$i] = $temp;
             }
             var_dump($array);
     }

     sel_sort([2,1,3,4,6,9,5,7,1]);
&lt;/pre&gt;
&lt;p&gt;堆排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function swap(&amp;amp;$array,$a,$b){
        $temp = $array[$a];
        $array[$a] = $array[$b];
        $array[$b] = $temp;
}

function buildMaxHeap(&amp;amp;$array,$len){
        for($i=intval($len/2)-1;$i&amp;gt;=0;$i--){
                $l = $i*2 + 1;
                $max = $l;
                if($len&amp;gt;$l){
                        $r = $l+1;
                        if($len&amp;gt;$r){
                                if($array[$r]&amp;gt;$array[$l]){
                                        $max = $r;
                                }
                        }
                        if($array[$max]&amp;gt;$array[$i]){
                                swap($array,$max,$i);
                        }
                }
        }
}

$array = [3,2,4,5,7,1,8];
$len = count($array);
buildMaxHeap($array, $len);
for($i=$len-1;$i&amp;gt;0;$i--){
        swap($array,$i,0);
        $len--;
        buildMaxHeap($array,$len);
}

var_dump($array);
&lt;/pre&gt;
&lt;p&gt;快速排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function quick_sort($array){
              $len = count($array);
              if($len&amp;lt;2){
                      return $array;
              }
              $right = $left = [];
              for($i=1;$i&amp;lt;$len;$i++){
                      if($array[$i]&amp;lt;$array[0]){
                              $left[] = $array[$i];
                      }
                      else{
                              $right[] = $array[$i];
                      }
              }
              $left = quick_sort($left);
              $right = quick_sort($right);
              return array_merge($left,[$array[0]],$right);
      }

      var_dump(quick_sort([2,1,2,3,6,5,7]));
&lt;/pre&gt;
&lt;p&gt;归并排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$array = [5,4,3,8,8,1,6];
    function merge_sort(&amp;amp;$array){
            $len = count($array);
            if($len&amp;lt;=1){
                    return $array;
            }
            $middle = intval($len/2);
            $left = array_slice($array,0,$middle);
            $right = array_slice($array,$middle);
            merge_sort($left);
            merge_sort($right);
            $array = merge($right,$left);
    }

    function merge($right,$left){
            $merge = [];
            while(count($right) &amp;amp;&amp;amp; count($left)){
                    if($right[0]&amp;gt;$left[0]){
                            $merge[] = array_shift($right);
                    }
                    else{
                            $merge[] = array_shift($left);
                    }
            }
            return array_merge($merge,$right,$left);
    }

    merge_sort($array);
    var_dump($array);
&lt;/pre&gt;
&lt;p&gt;基数排序：把每位数分开，高位不存在的补零。从低位开始比较，比到高位完成排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
  function base_sort(&amp;amp;$arr){//前提是数组都是正整数，且不为空

    $bit = 1;

    $len = count($arr);

    for($i=0; $i&amp;lt;$len; $i++){

       $strlen = strlen($arr[$i]);

       $bit = $strlen&amp;gt;$bit ? $strlen : $bit;

    }

    for($i=0; $i&amp;lt;$bit-1; $i++){

       $base = [];

       $divisor = pow(10,$i);

       for($j=0; $j&amp;lt;$len; $j++){

           $remain = $arr[$j]/$divisor%10;

           $base[$remain][] = $arr[$j];

       }

       $arr = [];

       for($k=0; $k&amp;lt;=9; $k++){

          if(isset($base[$k])){

              $arr = array_merge($arr,$base[$k]);

          }

       }

    }

}

$arr = [100,1,125,19999,9,808,28];

base_sort($arr);

var_dump($arr);
&lt;/pre&gt;
&lt;div class="figure"&gt;
&lt;img alt="https://img1.doubanio.com/view/note/l/public/p52272377.jpg" src="https://img1.doubanio.com/view/note/l/public/p52272377.jpg"&gt;
&lt;/div&gt;
&lt;p&gt;二分查找（时间复杂度log2n）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function bin_sch($array,$start,$end,$value){
            if($start &amp;gt; $end){
                    var_dump('没有找到');
            }
            $mid =  intval(($start + $end) / 2);
            if($array[$mid] == $value){
                    var_dump($mid);
            }
            elseif($array[$mid] &amp;gt; $value){
                    bin_sch($array,$start,$mid-1,$value);
            }
            else{
                    bin_sch($array,$mid+1,$end,$value);
            }
    }

    bin_sch([1,2,3,4,6,8],0,5,6);
&lt;/pre&gt;
&lt;p&gt;顺序查找:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
seq_sch([3,2,5,6,1],5,6);
    function seq_sch($array,$n,$value){
            for($i=0; $i&amp;lt;$n; $i++){
                    if($array[$i] == $value){
                            var_dump($i);exit;
                    }
            }
            var_dump('没有找到');
    }
&lt;/pre&gt;
&lt;p&gt;二维数组排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function two_array_sort($array,$key,$sort=SORT_ASC,$sort_type=SORT_NUMERIC){
            if(!is_array($array)){
                    return false;
            }
            $array_key = [];
            foreach($array as $value){
                    if(!is_array($value)){
                            return false;
                    }
                    $array_key[] = $value[$key];
            }
            array_multisort($array_key,$sort,$sort_type,$array);
            var_dump($array);
    }

    two_array_sort([['a'=&amp;gt;8,'b'=&amp;gt;2],['a'=&amp;gt;9,'b'=&amp;gt;2],['a'=&amp;gt;5,'b'=&amp;gt;2],['a'=&amp;gt;8,'b'=&amp;gt;2],['a'=&amp;gt;1,'b'=&amp;gt;2]], 'a');
&lt;/pre&gt;
&lt;p&gt;抢红包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function qhb($num,$money){
              if($money&amp;lt;$num*0.01){
                      return false;//保证每个人能有一分钱
              }
              for($i=1;$i&amp;lt;=$num;$i++){
                      if($i==$num){
                              $hb = $money;
                      }
                      else{
                              $max = round($money-($num-$i)*0.01, 2);//保证每个人能有一分钱
                              $max = round($max/($num-$i), 2);//让每个红包差距不是太大
                              $hb = mt_rand(0.01*100,$max*100)/100;
                              $money -= $hb;
                      }
                      var_dump([$i,$hb]);
              }
      }

      qhb(5,5);
&lt;/pre&gt;&lt;/div&gt;</description><category>php</category><category>算法</category><guid>https://dawnkeyan.github.io/posts/phpshi-xian-jing-dian-suan-fa/</guid><pubDate>Fri, 26 Oct 2018 02:29:53 GMT</pubDate></item><item><title>php-fpm</title><link>https://dawnkeyan.github.io/posts/php-fpm/</link><dc:creator>dawnkeyan</dc:creator><description>&lt;div&gt;&lt;p&gt;cgi 公共网关接口 是http服务器和其他机器上的程序进行通信的接口，起程序运行在网络服务器上&lt;/p&gt;
&lt;p&gt;fastcgi是常驻行的cgi，只要被激活一次，后面就不要每次都去fork一次，把cgi解释器保持在内存获得较高的效率，还支持分布式，可以放在网站服务器以外的主机上执行并且接受来自其他网站服务器的请求&lt;/p&gt;
&lt;p&gt;cgi和fastcgi都独立与语言&lt;/p&gt;
&lt;p&gt;php-fpm是FastCGI进程管理器&lt;/p&gt;
&lt;p&gt;优点：fastcgi独立与服务器，提供了一个比api更安全的环境,sapi把程序的代码和核心web服务器链接在一起，这样一个错误的api会影响其他的应用程序和核心服务器，恶意的挨批应用程序会截取另外的应用程序和核心服务器的密钥，不依赖web服务器&lt;/p&gt;
&lt;p&gt;缺点：因为是多进程的，所以比cgi多线程消耗内存（线程之间可共享），&lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;1.Web服务器启动时，载入FastCGI进程管理器；&lt;/p&gt;
&lt;p&gt;2.FastCGI进程管理器初始化，启动多个CGI解释器进程(PHP-CGI)并等待来自Web服务器的连接；&lt;/p&gt;
&lt;p&gt;3.当客户端请求到达Web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器，Web服务器将CGI环境变量和标准输入发送到FastCGI子进程PHP-CGI。&lt;/p&gt;
&lt;p&gt;4.FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回给Web服务器。当FastCGI子进程关闭连接时，请求便告知处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web服务器中)的下一个连接。而在CGI模式中，PHP-CGI在此便退出了。&lt;/p&gt;
&lt;p&gt;在上述情况中，可以想象CGI通常有多慢，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。另外，数据库持久连接可以工作。&lt;/p&gt;
&lt;p&gt;PHP-CGI是PHP自带的FastCGI管理器。&lt;/p&gt;
&lt;p&gt;PHP-CGI的不足：&lt;/p&gt;
&lt;p&gt;1.php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启。&lt;/p&gt;
&lt;p&gt;2.直接杀死php-cgi进程，php就不能运行了(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑重新生成新的子进程)。&lt;/p&gt;
&lt;blockquote&gt;
PHP-FPM的使用非常方便，配置都是在PHP-FPM.ini的文件内，而启动、重启都可以从php/sbin/PHP-FPM中进行。更方便的是修改php.ini后可以直接使用PHP-FPM reload进行加载，无需杀掉进程就可以完成php.ini的修改加载&lt;/blockquote&gt;
&lt;p&gt;结果显示使用PHP-FPM可以使php有不小的性能提升。PHP-FPM控制的进程cpu回收的速度比较慢,内存分配的很均匀。&lt;/p&gt;
&lt;p&gt;Nginx+PHP配置&lt;/p&gt;
&lt;p&gt;1、进程数优化&lt;/p&gt;
&lt;p&gt;pm = dynamic&lt;/p&gt;
&lt;p&gt;pm.max_children = 300 最大进程数&lt;/p&gt;
&lt;p&gt;pm.start_servers = 20 启动时的进程数&lt;/p&gt;
&lt;p&gt;pm.min_spare_servers = 5 最小空闲进程数，少于这个会启动新的等待服务&lt;/p&gt;
&lt;p&gt;pm.max_spare_servers = 35 最大空闲进程数 超过这个数会杀掉一部分&lt;/p&gt;
&lt;p&gt;注：
dynamic - 表示子进程的数量在下面配置的基础上动态设置，还有static和ondemand选项
static - 子进程的数量是固定的（pm.max_children）
ondemand - 进程在有需求时才产生（当请求时，与 dynamic 相反，pm.start_servers 在服务启动时即启动max_children&lt;/p&gt;
&lt;p&gt;2、最大请求数优化&lt;/p&gt;
&lt;p&gt;pm.max_requests = 10240&lt;/p&gt;
&lt;p&gt;NOTE:&lt;/p&gt;
&lt;p&gt;这个用来处理因为PHP解析器或引用的第三方库时，造成的内存泄露问题。
一个进程处理的请求数超过这个，就不接受新的请求&lt;/p&gt;
&lt;p&gt;3、最长执行时间优化（php.ini）&lt;/p&gt;
&lt;p&gt;request_terminate_timeout = 20&lt;/p&gt;
&lt;p&gt;NOTE:&lt;/p&gt;
&lt;p&gt;这个是用来处理因为PHP执行时间超长而报502错误的解决。&lt;/p&gt;
&lt;p&gt;这个时长配置可以在php.ini（max_execution_time）或php-fpm.conf中配置均可，为了不影响全局配置，可在php-fpm.conf中实现。&lt;/p&gt;
&lt;p&gt;PHP-FPM设置的脚本最大执行时间已经够长了，但执行耗时PHP脚本时，发现Nginx报错变为504错误。这是因为我们修改的只是PHP的配置，Nginx中也有关于与上游服务器通信超时时间的配置factcgi_connect/read/send_timeout。&lt;/p&gt;
&lt;p&gt;查看php进程数 ps aux | grep -c php-fpm&lt;/p&gt;&lt;/div&gt;</description><category>php</category><category>php-fpm</category><guid>https://dawnkeyan.github.io/posts/php-fpm/</guid><pubDate>Thu, 25 Oct 2018 07:29:46 GMT</pubDate></item></channel></rss>