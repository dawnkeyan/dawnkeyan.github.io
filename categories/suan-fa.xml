<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>晚起的虫子 (关于文章 算法)</title><link>https://dawnkeyan.github.io</link><description></description><atom:link href="https://dawnkeyan.github.io/categories/suan-fa.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2018 &lt;a href="mailto:dawnkeyan@126.com"&gt;dawnkeyan&lt;/a&gt; </copyright><lastBuildDate>Sat, 03 Nov 2018 12:33:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>php实现经典算法</title><link>https://dawnkeyan.github.io/posts/phpshi-xian-jing-dian-suan-fa/</link><dc:creator>dawnkeyan</dc:creator><description>&lt;div&gt;&lt;p&gt;冒泡:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function bub_sort($array){
      $n = count($array);
            for($i=0; $i&amp;lt;$n; $i++){
                    for($j=$i+1; $j&amp;lt;$n; $j++){
                            if($array[$i]&amp;gt;$array[$j]){
                                    $temp = $array[$i];
                                    $array[$i] = $array[$j];
                                    $array[$j] = $temp;
                            }
                    }
            }
            var_dump($array);
    }
    bub_sort([3,2,1,5,7,3]);
&lt;/pre&gt;
&lt;p&gt;直接插入排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function ins_sort($array){
             $len = count($array);
             for($i=1;$i&amp;lt;$len;$i++){
                     $temp = $array[$i];
                     for($j=$i-1;$j&amp;gt;=0;$j--){
                             if($temp&amp;lt;$array[$j]){
                                     $array[$j+1] = $array[$j];
                                     $array[$j] = $temp;
                             }
                             else{
                                     break;
                             }
                     }
             }
             var_dump($array);
     }

     ins_sort([3,1,2,5,7,10,9,8]);
&lt;/pre&gt;
&lt;p&gt;直接选择排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function sel_sort($array){
             $len = count($array);
             for($i=0;$i&amp;lt;$len-1;$i++){
                     $p = $i;
                     for($j=$i+1;$j&amp;lt;$len;$j++){
                             if($array[$j]&amp;gt;$array[$p]){
                                     $p = $j;
                             }
                     }
                     $temp = $array[$p];
                     $array[$p] = $array[$i];
                     $array[$i] = $temp;
             }
             var_dump($array);
     }

     sel_sort([2,1,3,4,6,9,5,7,1]);
&lt;/pre&gt;
&lt;p&gt;堆排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function swap(&amp;amp;$array,$a,$b){
        $temp = $array[$a];
        $array[$a] = $array[$b];
        $array[$b] = $temp;
}

function buildMaxHeap(&amp;amp;$array,$len){
        for($i=intval($len/2)-1;$i&amp;gt;=0;$i--){
                $l = $i*2 + 1;
                $max = $l;
                if($len&amp;gt;$l){
                        $r = $l+1;
                        if($len&amp;gt;$r){
                                if($array[$r]&amp;gt;$array[$l]){
                                        $max = $r;
                                }
                        }
                        if($array[$max]&amp;gt;$array[$i]){
                                swap($array,$max,$i);
                        }
                }
        }
}

$array = [3,2,4,5,7,1,8];
$len = count($array);
buildMaxHeap($array, $len);
for($i=$len-1;$i&amp;gt;0;$i--){
        swap($array,$i,0);
        $len--;
        buildMaxHeap($array,$len);
}

var_dump($array);
&lt;/pre&gt;
&lt;p&gt;快速排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function quick_sort($array){
              $len = count($array);
              if($len&amp;lt;2){
                      return $array;
              }
              $right = $left = [];
              for($i=1;$i&amp;lt;$len;$i++){
                      if($array[$i]&amp;lt;$array[0]){
                              $left[] = $array[$i];
                      }
                      else{
                              $right[] = $array[$i];
                      }
              }
              $left = quick_sort($left);
              $right = quick_sort($right);
              return array_merge($left,[$array[0]],$right);
      }

      var_dump(quick_sort([2,1,2,3,6,5,7]));
&lt;/pre&gt;
&lt;p&gt;归并排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$array = [5,4,3,8,8,1,6];
    function merge_sort(&amp;amp;$array){
            $len = count($array);
            if($len&amp;lt;=1){
                    return $array;
            }
            $middle = intval($len/2);
            $left = array_slice($array,0,$middle);
            $right = array_slice($array,$middle);
            merge_sort($left);
            merge_sort($right);
            $array = merge($right,$left);
    }

    function merge($right,$left){
            $merge = [];
            while(count($right) &amp;amp;&amp;amp; count($left)){
                    if($right[0]&amp;gt;$left[0]){
                            $merge[] = array_shift($right);
                    }
                    else{
                            $merge[] = array_shift($left);
                    }
            }
            return array_merge($merge,$right,$left);
    }

    merge_sort($array);
    var_dump($array);
&lt;/pre&gt;
&lt;p&gt;基数排序：把每位数分开，高位不存在的补零。从低位开始比较，比到高位完成排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
  function base_sort(&amp;amp;$arr){//前提是数组都是正整数，且不为空

    $bit = 1;

    $len = count($arr);

    for($i=0; $i&amp;lt;$len; $i++){

       $strlen = strlen($arr[$i]);

       $bit = $strlen&amp;gt;$bit ? $strlen : $bit;

    }

    for($i=0; $i&amp;lt;$bit-1; $i++){

       $base = [];

       $divisor = pow(10,$i);

       for($j=0; $j&amp;lt;$len; $j++){

           $remain = $arr[$j]/$divisor%10;

           $base[$remain][] = $arr[$j];

       }

       $arr = [];

       for($k=0; $k&amp;lt;=9; $k++){

          if(isset($base[$k])){

              $arr = array_merge($arr,$base[$k]);

          }

       }

    }

}

$arr = [100,1,125,19999,9,808,28];

base_sort($arr);

var_dump($arr);
&lt;/pre&gt;
&lt;div class="figure"&gt;
&lt;img alt="复杂度比较" src="https://img1.doubanio.com/view/note/l/public/p52272377.jpg"&gt;
&lt;/div&gt;
&lt;p&gt;二分查找（时间复杂度log2n）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function bin_sch($array,$start,$end,$value){
            if($start &amp;gt; $end){
                    var_dump('没有找到');
            }
            $mid =  intval(($start + $end) / 2);
            if($array[$mid] == $value){
                    var_dump($mid);
            }
            elseif($array[$mid] &amp;gt; $value){
                    bin_sch($array,$start,$mid-1,$value);
            }
            else{
                    bin_sch($array,$mid+1,$end,$value);
            }
    }

    bin_sch([1,2,3,4,6,8],0,5,6);
&lt;/pre&gt;
&lt;p&gt;顺序查找:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
seq_sch([3,2,5,6,1],5,6);
    function seq_sch($array,$n,$value){
            for($i=0; $i&amp;lt;$n; $i++){
                    if($array[$i] == $value){
                            var_dump($i);exit;
                    }
            }
            var_dump('没有找到');
    }
&lt;/pre&gt;
&lt;p&gt;二维数组排序:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function two_array_sort($array,$key,$sort=SORT_ASC,$sort_type=SORT_NUMERIC){
            if(!is_array($array)){
                    return false;
            }
            $array_key = [];
            foreach($array as $value){
                    if(!is_array($value)){
                            return false;
                    }
                    $array_key[] = $value[$key];
            }
            array_multisort($array_key,$sort,$sort_type,$array);
            var_dump($array);
    }

    two_array_sort([['a'=&amp;gt;8,'b'=&amp;gt;2],['a'=&amp;gt;9,'b'=&amp;gt;2],['a'=&amp;gt;5,'b'=&amp;gt;2],['a'=&amp;gt;8,'b'=&amp;gt;2],['a'=&amp;gt;1,'b'=&amp;gt;2]], 'a');
&lt;/pre&gt;
&lt;p&gt;抢红包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function qhb($num,$money){
              if($money&amp;lt;$num*0.01){
                      return false;//保证每个人能有一分钱
              }
              for($i=1;$i&amp;lt;=$num;$i++){
                      if($i==$num){
                              $hb = $money;
                      }
                      else{
                              $max = round($money-($num-$i)*0.01, 2);//保证每个人能有一分钱
                              $max = round($max/($num-$i), 2);//让每个红包差距不是太大
                              $hb = mt_rand(0.01*100,$max*100)/100;
                              $money -= $hb;
                      }
                      var_dump([$i,$hb]);
              }
      }

      qhb(5,5);
&lt;/pre&gt;&lt;/div&gt;</description><category>php</category><category>算法</category><guid>https://dawnkeyan.github.io/posts/phpshi-xian-jing-dian-suan-fa/</guid><pubDate>Fri, 26 Oct 2018 02:29:53 GMT</pubDate></item></channel></rss>